import numpy as np
import pandas as pd
import yfinance as yf
import datetime as dt
import copy
import matplotlib.pyplot as plt

rf = 0.04775
start = dt.datetime.today()-dt.timedelta(1825)
end = dt.datetime.today()
    
def CAGR(DF):
    df= DF.copy()
    df["cum_return"] = (1 + df["mon_ret"]).cumprod()
    n = len(df)/12
    CAGR = (df["cum_return"].tolist()[-1])**(1/n) -1
    return CAGR

def volatility(DF):
    df = DF.copy()
    vol = df["mon_ret"].std() *np.sqrt(12)
    return vol

def sharpe(DF,rf):
    df = DF.copy()
    sr = (CAGR(df) - rf)/volatility(df)
    return sr

def max_dd(DF):
    df = DF.copy()
    df["cum_return"] = (1 + df["mon_ret"]).cumprod()
    df["cum_roll_max"] = df["cum_return"].cummax()
    df["drawdown"] = df["cum_roll_max"] - df["cum_return"]
    df["drawdown_pct"] = df["drawdown"]/df["cum_roll_max"]
    max_dd = df["drawdown_pct"].max()
    return max_dd

tickers = ["AMZN", "GOOG", "MSFT", "SPY", "AAPL", "INTC","DB","NOG","CVX", "HD", "GAIN", "CPLP","XOM", "AMGN", "BX", "BAESY","LMT", "BMY", "BLK", "C", "USB", "KDP", "JPM", "ENB", "GS", "LAZ", "OXY", "NVDA", "SOFI", "WM", "TSLA", "V", "ADSK", "ABNB"]
ohlcv_mon = {}

#creating dataframe with closing price looping each ticker
for ticker in tickers:
    ohlcv_mon[ticker] = yf.download(ticker,start,end,interval ='1mo')
    ohlcv_mon[ticker].dropna(inplace=True, how='all')
    
tickers = ohlcv_mon.keys() # redefine tickers variable after removing any tickers with corrupted data

#Index KPI for buy and hold strategy over same period
SP500 = yf.download("^GSPC",start,end,interval = '1mo')
SP500['mon_ret'] = SP500["Adj Close"].pct_change().fillna(0)
CAGR(SP500)
sharpe(SP500,rf)
max_dd(SP500)

# calculating monthly return for each stock and consolidating return info by stock in a separate dataframe
ohlc_dict =copy.deepcopy(ohlcv_mon)
return_df =pd.DataFrame()
for ticker in tickers:
    print("Calculating Monthly Return For", ticker)
    ohlc_dict[ticker]["mon_ret"] = ohlc_dict[ticker]["Adj Close"].pct_change()
    return_df[ticker] = ohlc_dict[ticker]["mon_ret"]
return_df.dropna(inplace=True)


DF = return_df
m = 34
x = 17
def pflio(DF,m,x):
    """Returns cumulative portfolio return
    DF = dataframe with monthly return info for all stocks
    m = number of stock in the portfolio
    x = number of underperforming stocks to be removed from portfolio monthly"""
    df = DF.copy()
    portfolio = []
    monthly_ret = [0]
    for i in range(len(df)):
        if len(portfolio) > 0:
            monthly_ret.append(df[portfolio].iloc[i, :].mean())
            good_stocks = df[portfolio].iloc[i, :].sort_values(ascending=False)[:x].index.values.tolist()
            portfolio = [t for t in portfolio if t not in good_stocks]
        fill = m - len(portfolio)
        new_picks = df.iloc[i, :].sort_values(ascending=True)[:fill].index.values.tolist()
        portfolio = portfolio + new_picks
        print(portfolio)
    monthly_ret_df = pd.DataFrame(np.array(monthly_ret),columns=["mon_ret"])
    return monthly_ret_df

#Calculating overall strategy KPI's
CAGR(pflio(return_df,34,17))
sharpe(pflio(return_df,34,17),rf)
max_dd(pflio(return_df,34,17))


#Visualing results
fig, ax = plt.subplots()
plt.plot((1+pflio(return_df,34,x)).cumprod())
plt.plot((1+SP500["mon_ret"].reset_index(drop=True)).cumprod())
plt.title("Index Return vs Strategy Return")
plt.ylabel("cumulative return")
plt.xlabel("months")
ax.legend(["Strategy Return","Index Return"])
